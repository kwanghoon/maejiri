
@type

Int : Type.

ahPlus  : Int -> Int -> Int -> Type.
ahMinus : Int -> Int -> Int -> Type.

ahEqInt : Int -> Int -> Type.   ;; BUG:: Prop -> Type.

@term

zero : Int.
succ : Int -> Int.
pred : Int -> Int.

;; |- 0 + x = x
plus1 : /\x:Int. ahPlus zero x x.

;; |- x + 0  = x
plus2 : /\x:Int. ahPlus x zero x.

;;     |- x + y = z
;; ----------------------
;; |- succ x + y = succ z
plus3 : /\x:Int./\y:Int./\z:Int.
          ahPlus x y z 
            -> ahPlus (succ x) y (succ z).

;;     |- x + y = z
;; ----------------------
;; |- x + succ y = succ z
plus4 : /\x:Int./\y:Int./\z:Int.
          ahPlus x y z 
            -> ahPlus x (succ y) (succ z).

;;     |- x + y = z
;; --------------------------
;; |- (pred x) + y = (pred z)
plus5 : /\x:Int./\y:Int./\z:Int.
          ahPlus x y z 
            -> ahPlus (pred x) y (pred z).

;;     |- x + y = z
;; --------------------------
;; |- x + (pred y) = (pred z)
plus6 : /\x:Int./\y:Int./\z:Int.
          ahPlus x y z 
            -> ahPlus x (pred y) (pred z).


;; |- x + y = z  |- x = x'  |- y = y'  |- z = z'
;; ---------------------------------------------
;;               |- x' + y' = z'
plus7 : /\x:Int./\x':Int./\y:Int./\y':Int./\z:Int./\z':Int.
          ahPlus x y z
            -> ahEqInt x x'
            -> ahEqInt y y'
            -> ahEqInt z z'
                 -> ahPlus x' y' z'.

;; |- x = x
eq1 : /\x:Int. ahEqInt x x.

;; |- x = y
;; --------
;; |- y = x
eq2 : /\x:Int./\y:Int. ahEqInt x y -> ahEqInt y x.

;; |- x = y  |- y = z
;; ------------------
;;      |- x = z
eq3 : /\x:Int./\y:Int./\z:Int. ahEqInt x y -> ahEqInt y z -> ahEqInt x z.

;; |- x = y
;; --------------------
;; |- succ (pred x) = y
eq4 : /\x:Int./\y:Int. ahEqInt x y -> ahEqInt (succ (pred x)) y.

;; |- x = y
;; --------------------
;; |- pred (succ x) = y
eq5 : /\x:Int./\y:Int. ahEqInt x y -> ahEqInt (pred (succ x)) y.


@def

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; To prove 2 + 1 = 3,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ------------------------------- (plus1)
;; |- zero + succ zero = succ zero
;; ------------------------------------------- (plus3)
;; |- succ zero + succ zero = sicc (succ zero) 
;; --------------------------------------------------------- (plus3)
;; |- succ (succ zero) + succ zero = succ (succ (succ zero))

to_prove_2_plus_1_is_3 = 
   plus3 (succ zero) (succ zero) (succ (succ zero)) 
     (plus3 zero (succ zero) (succ zero)            
       (plus1 (succ zero))).                        

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; To prove 1 + (-2) = -1,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; [T1]
;; ---------------------------------------------- (plus1)
;; |- zero + pred (pred zero) = pred (pred zero)
;; --------------------------------------------------------- (plus3)
;; |- succ zero + pred (pred zero) = succ (pred (pred zero))

;; [T2]
;; ------------------------ (eq1)
;; |- succ zero = succ zero      


;; [T3]
;; -------------------------------------- (eq1)
;; |- pred (pred zero) = pred (pred zero)

;; [T4]
;; ------------------------ (eq1)
;; |- pred zero = pred zero
;; -------------------------------------- (eq4)
;; |- succ (pred (pred zero)) = pred zero

;; [T1] |- succ zero + pred (pred zero) = succ (pred (pred zero))
;; [T2] |- succ zero = succ zero
;; [T3] |- pred (pred zero) = pred (pred zero)
;; [T4] |- succ (pred (pred zero)) = pred zero
;; -------------------------------------------------------- (plus7)
;; |- succ zero + pred (pred zero) = pred zero

to_prove_1_minus_2_is_misus_1 = 
   plus7 (succ zero) (succ zero) 
         (pred (pred zero)) (pred (pred zero))
         (succ (pred (pred zero))) (pred zero)
     (plus3 zero (pred (pred zero)) (pred (pred zero)) 
        (plus1 (pred (pred zero))))
     (eq1 (succ zero))
     (eq1 (pred (pred zero)))
     (eq4 (pred zero) (pred zero)
        (eq1 (pred zero))).

