;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; The Simply-Typed Lambda Calculus (STLC) in LF
;;
;; By Kwanghoon Choi
;;
;; Ref. twelf.org (Proving Metatheorems)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

@type

Tp    : Type.              ;; types in STLC

Tm    : Type.              ;; terms in STLC
value : Tm -> Type.        ;; values in STLC

of    : Tm -> Tp -> Type.  ;; typing judgments in STLC

step  : Tm -> Tm-> Type.   ;; operational semantics judgments in STLC

preserv : /\t:Tp./\e:Tm./\e':Tm.   ;; Preservation in STLC
           step e e'
            -> of e t
             -> of e' t
              -> Type.

@term

;; Types
unit  : Tp.
arrow : Tp -> Tp -> Tp.

;; Terms
empty : Tm.
app   : Tm -> Tm -> Tm.
lam   : Tp -> (Tm -> Tm) -> Tm.

;; Values
value_empty : value empty.
value_lam   : /\t:Tp./\e:Tm->Tm.value (lam t e).

;; Typing rules
of_empty : of empty unit.
of_lam   : /\t2:Tp./\t:Tp./\e:Tm -> Tm.
             (/\x:Tm. of x t2 -> of (e x) t)
              -> of (lam t2 e) (arrow t2 t).
of_app   : /\t2:Tp./\t:Tp./\e1:Tm./\e2:Tm.
             of e2 t2
              -> of e1 (arrow t2 t)
               -> of (app e1 e2) t.

;; Operational semantics
step_app1 : /\e1:Tm./\e1':Tm./\e2:Tm.
             step e1 e1' 
              -> step (app e1 e2) (app e1' e2).
step_app2 : /\e1:Tm./\e2:Tm./\e2':Tm.
             value e1
              -> step e2 e2'
               -> step (app e1 e2) (app e1 e2').
step_beta : /\t:Tp./\e:Tm -> Tm./\e2:Tm.
             value e2
              -> step (app (lam t e) e2) (e e2).


test :
	/\e1:Tm./\e1':Tm./\e2:Tm./\t2:Tp./\t:Tp.
	 /\dStepE1 : step e1 e1'.
	 /\dOfE1  : of e1  (arrow t2 t).
	 /\dOfE1' : of e1' (arrow t2 t).
	 /\dOfE2  : of e2  t2.
	  preserv (arrow t2 t) e1 e1'
                  dStepE1 dOfE1 dOfE1'.

;; Type preservation
preserv_app1 :
	/\e1:Tm./\e1':Tm./\e2:Tm./\t2:Tp./\t:Tp.
	 /\dStepE1 : step e1 e1'.
	 /\dOfE1  : of e1  (arrow t2 t).
	 /\dOfE1' : of e1' (arrow t2 t).
	 /\dOfE2  : of e2  t2.
	  preserv (arrow t2 t) e1 e1'
                  dStepE1 dOfE1 dOfE1'
	   -> preserv t (app e1 e2) (app e1' e2)
                      (step_app1 
                              e1 e1' e2
                              dStepE1)
	              (of_app t2 t e1 e2
                              dOfE2 dOfE1)
	              (of_app t2 t e1' e2
                              dOfE2 dOfE1').

preserv_app2 :
        /\e1:Tm./\e2:Tm./\e2':Tm./\t2:Tp./\t:Tp.
         /\dStepE2 : step e2 e2'.
         /\dOfE1  : of e1 (arrow t2 t).
         /\dOfE2  : of e2 t2.
         /\dOfE2' : of e2' t2.
         /\dValE1 : value e1.
          preserv (arrow t2 t) e2 e2' 
                  dStepE2 dOfE2 dOfE2'
           -> preserv t2 (app e1 e2) (app e1 e2')
                      (step_app2 
                              e1 e2 e2'
                              dValE1)
                      (of_app t2 t
                              dOfE2  dOfE1)
                      (of_app t2 t 
                              dOfE2' dOfE1).

preserv_beta :
        /\e:Tm->Tm./\e2:Tm./\t2:Tp./\t:Tp.
         /\dOfE  : /\x:Tm. of x t2 -> of (e x) t.
         /\dOfE2 : of e2 t2.
         /\dVal : value e2.
          preserv t (app (lam t2 e) e2) (e e2)
                  (step_beta              ;; step (app (lam t2 e) e2) (e e2)
                          t2 e e2 
                          dVal)           
                  (of_app                 ;; of (app (lam t2 e) e2) t
                          t2 t (lam t2 e) e2
                          dOfE2
                          (of_lam         ;; of (lam t2 e) (arrow t2 t)
                                 t2 t e
                                 dOfE))
                  (dOfE e2 dOfE2).        ;; of (e e2) t
