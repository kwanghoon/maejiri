;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; The Formal Definition of RIF in LF
;;     (RIF: Refined Imperative Fixped-Point Calculus)
;;
;; By Kwanghoon Choi
;;
;; Ref. Borgstrom, Gordon, Pucella, Roles, Stacks, Histories: 
;;      A Triple for Hoare, JFP, 2010.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

@type

 ;; Syntactic Categories

 i : Type.    ;; Is this a good idea to use i?
 o : Type.    ;; The same question.

 ;; Judgment

 T : o -> Type.

@term

 ;; Operations

 equal  : i -> i -> o.
 not    : o -> o.
 imply  : o -> o -> o.
 exists : (i -> o) -> o.
 forall : (i -> o) -> o.
 conj   : o -> o -> o.
 disj   : o -> o -> o. 

 ;; Axioms and Rules

 eq0 : /\x:i. T (equal x x).
 eq1 : /\x:i./\y:i./\t:i->i. T (equal x y) -> T (equal (t x) (t y)).
 eq2 : /\x:i./\y:i./\f:i->o. T (equal x y) -> T (f x) -> T (f y).

 not_i : /\phi:o./\psi:o. (T phi -> T psi) -> (T phi -> T (not psi)) -> T (not phi).

 conj_i : /\phi:o./\psi:o.T phi -> T psi -> T (conj phi psi).

 disj_i_left  : /\phi:o./\psi:o. T phi -> T (disj phi psi).
 disj_i_right : /\phi:o./\psi:o. T psi -> T (disj phi psi).

 conj_e_left  : /\phi:o./\psi:o. T (conj phi psi) -> T phi.
 conj_e_right : /\phi:o./\psi:o. T (conj phi psi) -> T psi.

 notnot : /\phi:o. T (not (not phi)) -> T phi.

 disj_e : /\phi:o./\psi:o./\nu:o. (T phi -> T nu) -> (T psi -> T nu) -> (T (disj phi psi) -> T nu).

 imply_e : /\phi:o./\psi:o. (T (imply phi psi)) -> T phi -> T psi.
 imply_i : /\phi:o./\psi:o. (T phi -> T psi) -> T (imply phi psi).

 exists_e : /\f:i->o./\phi:o. T (exists f) -> ((/\x:i. T (f x) -> T phi) -> T phi) -> T phi.
 exists_i : /\f:i->o./\t:i. T (f t) -> T (exists f).
 forall_e : /\f:i->o./\t:i. T (forall f) -> f t.
 forall_i : /\f:i->o. (/\t:i. T (f t)) -> T (forall f).

@def

 ; p1 : o
 p1 = imply (forall (\x:i. equal x x)) (exists (\x:i. equal x x)).
